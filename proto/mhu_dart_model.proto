syntax = "proto3";

message CmnScalarMsg {
  oneof  type {
    double double_value = 1;
    float float_value = 2;
    int32 int32_value = 3;
    int64 int64_value = 4;
    uint32 uint32_value = 5;
    uint64 uint64_value = 6;
    sint32 sint32_value = 7;
    sint64 sint64_value = 8;
    fixed32 fixed32_value = 9;
    fixed64 fixed64_value = 10;
    sfixed32 sfixed32_value = 11;
    sfixed64 sfixed64_value = 12;
    bool bool_value = 13;
    string string_value = 14;
    bytes bytes_value = 15;
  }
}

message CmnSingleMsg {
  oneof type {
    CmnScalarMsg scalar_value = 1;
    bytes message_value = 2;
    int32 enum_value = 3;
  }
}
message CmnRepeatedMsg {
  repeated CmnSingleMsg single_values = 1;
}
message CmnRepeatedStringMsg {
  repeated string string_values = 1;
}
message CmnRepeatedInt32Msg {
  repeated int32 int32_values = 1;
}
message CmnMapEntryMsg {
  CmnScalarMsg entry_key = 1;
  CmnSingleMsg entry_value = 2;
}
message CmnMapMsg {
  repeated CmnMapEntryMsg entries = 1;
}
message CmnStringMapMsg {
  map<string, CmnSingleMsg> string_map = 1;
}
message CmnInt32MapMsg {
  map<int32, CmnSingleMsg> int32_map = 1;
}
message CmnAnyMsg {
  oneof  type {
//    bytes raw_value = 1;
    CmnSingleMsg single_value = 2;
    CmnRepeatedMsg repeated_value = 3;
    CmnMapMsg map_value = 4;
    CmnStringMapMsg string_map_value = 5;
    CmnInt32MapMsg int32_map_value = 6;
    CmnRepeatedStringMsg repeated_string_value = 7;
    CmnRepeatedInt32Msg repeated_int32_value = 8;
  }
}

message CmnTimestampMsg {
  double millis_sinceEpoch = 1;
}

message CmnDimensionsMsg {
  int32 width = 1;
  int32 height = 2;
}

message CmnGeolocationMsg {
  double latitude = 1;
  double longitude = 2;
  CmnTimestampMsg timestamp = 3;
  double altitude = 4;
  double accuracy = 5;
  double heading = 6;
  double speed = 7;
  double speed_accuracy = 8;
}

message CmnPointMsg {
  int32 x = 1;
  int32 y = 2;
}

message CmnOffsetMsg {
  double x = 1;
  double y = 2;
}
message CmnBoundingBoxMsg {
  CmnPointMsg origin = 1;
  CmnDimensionsMsg size = 2;
}


// dynamic fields


message CmnTypeDefMsg {
  oneof type {
    CmnIntTypeMsg int_type = 3;
    CmnStringTypeMsg string_type = 4;
    CmnDecimalTypeMsg decimal_type = 5;
    CmnBoolTypeMsg bool_type = 6;
    CmnDateTypeMsg date_type = 8;
    CmnEnumTypeMsg enum_type = 9;
    CmnListTypeMsg list_type = 10;
    CmnSetTypeMsg set_type = 11;
    CmnRefTypeMsg ref_type = 12;
  }
}



message CmnIntTypeMsg {}
message CmnStringTypeMsg {}
message CmnDecimalTypeMsg {}
message CmnBoolTypeMsg {}
message CmnDateTypeMsg {
  CmnDatePrecisionEnm precision = 1;
}
enum CmnDatePrecisionEnm {
  day = 0;
  month = 1;
  year = 2;
}
message CmnEnumTypeMsg {
  map<string, CmnEnumOptionMsg> options = 2;
}

message CmnEnumOptionMsg {
  string label = 2;
  int32 order = 4;
  bool hidden = 3;
}

message CmnListTypeMsg {
  CmnTypeDefMsg item = 1;
}
message CmnSetTypeMsg {
  CmnTypeDefMsg item = 1;
}
message CmnRefTypeMsg {
}

message CmnFieldValueMsg {
  oneof type {
    int32 int_value = 3;
    string string_value = 4;
    string decimal_value = 5;
    CmnDateValueMsg date_value = 6;
    bool bool_value = 8;
    string enum_value = 9;
    CmnRepeatedValueMsg list_value = 10;
    CmnRepeatedValueMsg set_value = 11;
    CmnFieldValueMsg ref_value = 12;
  }
}

enum CmnMonthEnm {
  none = 0;
  january = 1;
  february = 2;
  march = 3;
  april = 4;
  may = 5;
  june = 6;
  july = 7;
  august = 8;
  september = 9;
  october = 10;
  november = 11;
  december = 12;
}


message CmnDateValueMsg {
  int32 year = 1;
  CmnMonthEnm month = 2;
  int32 day = 3;
}

message CmnRepeatedValueMsg {
  repeated CmnFieldValueMsg values = 1;
}

// XML

message CmnXmlElementMsg {
  oneof cardinality {
    CmnXmlSingleElementMsg single = 1;
    CmnXmlRepeatedElementMsg repeated = 2;
  }
}

message CmnXmlAttributeMsg {
  string name = 1;
  oneof value {
    string text = 2;
    string parameter = 3;
    int32 index_start_at = 4;
  }
}

message CmnXmlSingleElementMsg {
  string name = 1;
  repeated CmnXmlAttributeMsg attributes = 2;
  repeated CmnXmlContentMsg content = 3;
}

message CmnXmlContentMsg {
  oneof type {
    string text = 1;
    string parameter = 2;
    CmnXmlAggregateMsg aggregate = 3;
    CmnXmlElementMsg element = 4;
    CmnExpressionMsg expression = 5;
  }
}

message CmnXmlAggregateMsg {
  string source = 1;
  oneof type {
    string sum_of = 2;
  }
}

message CmnXmlRepeatedElementMsg {
  string source = 1;
  CmnXmlElementMsg element = 2;
}

// expressions

message CmnExpressionMsg {
  oneof type {
    string parameter = 1;
    CmnValidCharactersExpressionMsg valid_characters = 2;
  }
}

message CmnValidCharactersExpressionMsg {
  CmnExpressionMsg expression = 1;
  string valid_characters = 2;
}


// Color Theme

message CmnColorThemeMsg {
  uint32 seed_color = 1;
  reserved 2 ; // bool darkTheme = 2;
  CmnThemeModeEnm theme_mode = 3;
}

enum CmnThemeModeEnm {
  system = 0;
  light = 1;
  dark = 2;
}

